name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

env:
  PIP_CACHE_DIR: ~/.cache/pip
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  DEPLOYMENT_ENVIRONMENT: ${{ 
    github.event.pull_request.head.ref == 'develop' && 'staging' || 
    github.ref == 'refs/heads/main' && 'production' || 
    github.ref == 'refs/heads/develop' && 'staging' || 
    'development' 
  }}
  DEVELOP_SIZE_MAXMB: 25
  DEPLOYMENT_SIZE_MAXMB: 125

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python_version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt black ruff pytest pytest-cov pytest-xdist

      - name: Check code formatting with black
        run: black --check .

      - name: Lint code with ruff
        run: ruff check .

      - name: Run tests with pytest
        run: |
          pytest --cov=your_package --cov-report=xml -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: unittests
          name: codecov-python-${{ matrix.python_version }}
          fail_ci_if_error: true

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python_version }}
          path: coverage.xml
          retention-days: 14

  quality-checks:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check repository size
        run: |
          SIZE_MB=$(du -sm . | cut -f1)
          if [ "$SIZE_MB" -gt ${{ env.DEPLOYMENT_SIZE_MAXMB }} ]; then
            echo "Repository size exceeds maximum allowed"
            exit 1
          fi
